name: CI

on:
  push:
    branches:
      - main
  pull_request:


jobs:
  Build:
    strategy:
      fail-fast: true
      matrix:
        # os: ["ubuntu", "macos", "windows"]
        os: ["windows"]
        python-version: ["3.10"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 60

    steps:
      # Preamble which sets up Python, and Poetry as well as setting up cross CI
      # run caches for pip and Poetry dependency downloads.
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install -U pip # to ensure version > 20 to have cache dir
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Pip Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ matrix.task }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}



      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true



      - name: Configure poetry
        run: |
          poetry config installer.modern-installation false
          poetry config virtualenvs.in-project true
          
          
          
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          


      # This is from <https://github.com/python-poetry/poetry/blob/639d5e057/.github/workflows/main.yml#L57-L60>
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          timeout 10s poetry run pip --version || rm -rf .venv
      # Repo specific



      - name: lock new dependences
        run: |
          poetry lock --no-update


      - name: update with new dependences
        run: |
          poetry update


      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          
          
      - name: Install library
        run: poetry install --no-interaction
      - run: |
          source $VENV
          # pytest --version          
          

           
          
      - name: Export requirements file from lock file
        run: |
          poetry export -f requirements.txt --output requirements.txt
      - name: Build the executable
        run: |
          poetry run pyoxidizer build
      - name: Create zip of the build
        run: |
          python -c "import shutil; shutil.make_archive('release', 'zip', 'build/dist/')"
      - uses: actions/upload-artifact@v3
        with:
          name: Enopios-${{ runner.os }}
          path: |
            release.zip
      - name: Publish artefacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'release.zip'
          asset_name: 'release.zip'
          tag: ${{ github.ref }}
          overwrite: true
